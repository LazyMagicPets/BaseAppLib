@namespace BlazorUI
@page "/HomePage"
@*
    CoreComponentBaseAssignViewModel<T> : LzReactiveComponentBaseAssignViewModel<T>
    LzReactiveComponentBaseAssignViewModel<T> : ComponentBase, IViewFor<T>, INotifyPropertyChanged, ICanActivate, IDisposable
    CoreComponentBaseAssignViewModel instruments the component with ReactiveUI bindings making it easy to implement MVVM with Blazor.
    See also: 
        CoreComponentBase<T> - view model injected directly
        CoreComponentBasePassViewModel<T> - view model passed as parameter
*@
@inherits LzComponentBaseAssignViewModel<ISessionViewModel>

<MudPaper Height="400px" Width="600px">
    <MudContainer Fixed="true">

        @if (ViewModel!.IsSignedIn)
        {
            <h1>Welcome, @ViewModel!.AuthProcess.Login</h1>
        }
        else
        {
            <h1>Hi there, lets get connected!</h1>
        }
        <LzAuth ViewModel="@ViewModel!.AuthProcess" />

    </MudContainer>
</MudPaper>

@code {
    // Get access to the current sessions data
    [Inject] private ICurrentSessionViewModel SessionViewModel { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        ViewModel = SessionViewModel;
        await base.OnInitializedAsync();
    }
}
