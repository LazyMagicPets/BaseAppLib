@namespace BlazorUI
@inject NavigationManager Navigation
@inject IOIDCService AuthService
@inject IRememberMeService RememberMe
@inject IProfileManagementService ProfileService
@inject ILzHost host

@if (DisplayStyle == "bar")
{
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="gap-0">
        @if (isAuthenticated)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Person"
                            Style="margin: 0; padding: 0;"
                            Color="Color.Inherit"
                            Title="Settings"
                            OnClick="OpenSettingsDialog" />
            <MudIconButton Icon="@Icons.Material.Filled.Logout"
                            Style="margin: 0; padding: 0;"
                            Color="Color.Inherit"
                            Title="Logout"
                            OnClick="async () => await BeginLogOut()" />
        }
        else
        {
            @if (isCheckingAuthState)
            {
                <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                <MudText Color="Color.Inherit" Typo="Typo.body2">Checking...</MudText>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Person"
                            Style="margin: 0; padding: 0;"
                            Color="Color.Inherit"
                            Title="Settings"
                            OnClick="OpenSettingsDialog" />
            <MudIconButton Icon="@Icons.Material.Filled.Login"
                            Style="margin: 0; padding: 0;"
                            Color="Color.Inherit"
                            Title="Login"
                            OnClick="BeginLogIn" />
        }
    </MudStack>
}
else
{
        <AuthorizeView>
            <Authorized>
                <MudContainer Fixed="true">
                    <MudText>Welcome @userName</MudText>
                </MudContainer>
            </Authorized>
            <NotAuthorized>
                <MudText>
                    Welcome, you are not Logged in. Please log in.
                    <MudIconButton Icon="@Icons.Material.Filled.Login"
                                   Style="margin: 0; padding: 0;"
                                   Color="Color.Inherit"
                                   Title="Login"
                                   OnClick="BeginLogIn"/>
                </MudText>
            </NotAuthorized>
        </AuthorizeView>
}

<MudPopover Open="showSettingsDialog" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopLeft">
    <div style="width: 300px;">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
            Login Settings
        </MudText>

        <MudStack Spacing="3">
            @if (isAuthenticated)
            {
                <MudText>Logged in as: <strong>@userName</strong></MudText>
                <MudDivider />
            }

            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText>Remember Me</MudText>
                <MudSwitch @bind-Value="rememberMeEnabled"
                          Color="Color.Primary"
                          UnCheckedColor="Color.Default" />
            </MudStack>

            @if (!isAuthenticated)
            {
                <MudDivider />
                <MudButton FullWidth="true"
                          Variant="Variant.Text"
                          StartIcon="@Icons.Material.Filled.LockReset"
                          OnClick="HandleForgotPasswordFromPopover">
                    Forgot Password?
                </MudButton>
            }
        </MudStack>

        <MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-4 mb-2">
            <MudButton OnClick="CloseSettingsDialog">Close</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveSettings">Save</MudButton>
        </MudStack>
    </div>
</MudPopover>

@code {
    [Parameter] public string DisplayStyle { get; set; } = "bar";
    private bool isAuthenticated = false;
    private string? userName = null;
    private bool isCheckingAuthState = false;
    private bool rememberMeEnabled = false;
    private bool showSettingsDialog = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Show checking state and allow user interaction
            isCheckingAuthState = true;
            StateHasChanged();

            // Check initial authentication state (this may take 10+ seconds)
            // await UpdateAuthenticationState();

            // Hide checking state
            isCheckingAuthState = false;
            StateHasChanged();

            // Subscribe to authentication changes
            AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

            // Initialize Remember Me state - set default to false for now
            rememberMeEnabled = false;
        }
        catch (Exception ex)
        {
            // Initialization failed - authentication state will remain false
            isCheckingAuthState = false;
            StateHasChanged();
        }
    }

    private async void OnAuthenticationStateChanged(object? sender, OIDCAuthenticationStateChangedEventArgs e)
    {
        await UpdateAuthenticationState();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            var authState = await AuthService.GetAuthenticationStateAsync();
            isAuthenticated = authState.IsAuthenticated;
            userName = authState.UserName;
        }
        catch (Exception ex)
        {
            // Failed to update auth state
            isAuthenticated = false;
            userName = null;
        }
    }

    private async void BeginLogIn()
    {
        try
        {
            await AuthService.LoginAsync();
        }
        catch (Exception ex)
        {
            // Handle error silently for now
        }
    }

    private async Task BeginLogOut()
    {
        try
        {
            // Call the OIDC service logout directly
            // This handles token clearing and Cognito logout navigation
            await AuthService.LogoutAsync();
        }
        catch (Exception ex)
        {
            // Fallback to local navigation if logout fails
            Navigation.NavigateTo(host.AppPath, forceLoad: true);
        }
    }

    private async void HandleForgotPassword()
    {
        try
        {
            await ProfileService.GetPasswordResetUrlAsync();
        }
        catch (Exception ex)
        {
            // Handle error silently for now
            Console.WriteLine($"[LoginDisplay] Error during forgot password: {ex.Message}");
        }
    }

    private void OpenSettingsDialog()
    {
        showSettingsDialog = true;
        StateHasChanged();
    }

    private void CloseSettingsDialog()
    {
        showSettingsDialog = false;
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        try
        {
            // TODO: Implement RememberMe settings persistence when service methods are available
            // For now, just close the dialog
            showSettingsDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LoginDisplay] Error saving settings: {ex.Message}");
        }
    }

    private async void HandleForgotPasswordFromPopover()
    {
        try
        {
            showSettingsDialog = false;
            StateHasChanged();
            await ProfileService.GetPasswordResetUrlAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LoginDisplay] Error during forgot password: {ex.Message}");
        }
    }


    public void Dispose()
    {
        if (AuthService != null)
        {
            AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        }
    }
}